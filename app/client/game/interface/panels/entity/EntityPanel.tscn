[gd_scene load_steps=11 format=3 uid="uid://cai8kctsxyqal"]

[ext_resource type="Script" path="res://app/client/game/interface/panels/entity/EntityPanel.cs" id="1"]
[ext_resource type="PackedScene" uid="uid://dhihaeur1rr0g" path="res://app/client/game/interface/panels/entity/EntityName.tscn" id="2"]
[ext_resource type="Script" path="res://app/client/game/interface/panels/entity/abilities/AbilityButtons.cs" id="3"]
[ext_resource type="PackedScene" uid="uid://ba8roqfkqi5rh" path="res://app/client/game/interface/panels/entity/abilities/AbilityButton.tscn" id="8"]
[ext_resource type="Texture2D" uid="uid://c8yg71tnayeuw" path="res://assets/sprites/interface/panel.png" id="9"]
[ext_resource type="PackedScene" uid="uid://c06ip2burr08v" path="res://app/client/game/interface/panels/entity/display/InfoDisplay.tscn" id="10"]
[ext_resource type="Texture2D" uid="uid://bftermtjj8sep" path="res://assets/sprites/interface/stats-panel.png" id="13"]
[ext_resource type="Theme" uid="uid://dp1nuutqxoubu" path="res://app/shared/theme/Theme.tres" id="14"]

[sub_resource type="Shader" id="2"]
code = "shader_type canvas_item;
render_mode unshaded;

uniform vec4 outline_color : source_color;
uniform bool enabled;

const int intensity = 250;
const float precision = 0.0065;

varying vec2 o;
varying vec2 f;

void vertex()
{
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{	
	vec4 outline_color_changing = outline_color + ((sin(TIME * 3.5) + 1.0) / 2.0) - 0.08;
	outline_color_changing.a = 1.0;
	
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.01){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 1.0 && enabled)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a && outline_sample.a > 0.9){
					final_color = outline_color_changing;
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id="3"]
resource_local_to_scene = true
shader = SubResource("2")
shader_parameter/outline_color = Color(0, 0, 0, 1)
shader_parameter/enabled = false

[node name="EntityPanel" type="Control"]
layout_mode = 3
anchors_preset = 3
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -272.0
offset_top = -719.0
offset_bottom = 39.0
grow_horizontal = 0
grow_vertical = 0
mouse_filter = 2
theme = ExtResource("14")
script = ExtResource("1")

[node name="Background" type="TextureRect" parent="."]
layout_mode = 0
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -272.0
offset_top = -257.0
offset_bottom = 91.0
texture = ExtResource("13")
expand_mode = 1
stretch_mode = 5

[node name="InfoDisplayBackground" type="NinePatchRect" parent="Background"]
layout_mode = 0
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -268.0
offset_top = -264.0
offset_right = -202.0
offset_bottom = -205.0
scale = Vector2(4, 4)
texture = ExtResource("9")
patch_margin_left = 32
patch_margin_top = 18
patch_margin_right = 32
patch_margin_bottom = 18

[node name="Behaviours" type="GridContainer" parent="."]
layout_mode = 0
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -136.0
offset_top = -281.0
offset_right = 6.10352e-05
offset_bottom = -257.0
grow_horizontal = 0
grow_vertical = 0
size_flags_vertical = 0
theme_override_constants/h_separation = 4
theme_override_constants/v_separation = 4
columns = 5

[node name="EntityName" parent="." instance=ExtResource("2")]
layout_mode = 1
offset_left = -251.0
offset_top = -254.0
offset_right = 1.0
offset_bottom = -218.0
grow_horizontal = 0
grow_vertical = 0

[node name="Panel" type="VBoxContainer" parent="."]
layout_mode = 0
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -268.0
offset_top = -213.0
offset_right = -12.0
offset_bottom = 59.0
grow_horizontal = 0
size_flags_horizontal = 3
size_flags_vertical = 2
theme_override_constants/separation = 4

[node name="AbilityButtons" type="HBoxContainer" parent="Panel"]
custom_minimum_size = Vector2(0, 40)
layout_mode = 2
theme_override_constants/separation = 4
alignment = 2
script = ExtResource("3")
AbilityIconPaths = {
"rev_slave_build": "res://assets/icons/icon_ability_build.png",
"slave_build": "res://assets/icons/icon_ability_build.png",
"slave_manual_labour": "res://assets/icons/icon_ability_build.png"
}

[node name="AbilityButton" parent="Panel/AbilityButtons" instance=ExtResource("8")]
material = SubResource("3")
layout_mode = 2

[node name="InfoDisplay" parent="Panel" instance=ExtResource("10")]
layout_mode = 2
