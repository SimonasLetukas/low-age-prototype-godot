[gd_scene load_steps=6 format=2]

[ext_resource path="res://Demo/Demo.tscn" type="PackedScene" id=1]
[ext_resource path="res://Client/Camera.gd" type="Script" id=2]
[ext_resource path="res://Client/Maps/MapCreator.tscn" type="PackedScene" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity : hint_range(0,200); 
uniform float precision : hint_range(0,0.02);
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.01){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 1.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a && outline_sample.a > 0.9){
					final_color = outline_color;
				}
			}
		}
	}
	COLOR = final_color; 
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/intensity = 50
shader_param/precision = 0.007
shader_param/outline_color = Color( 0, 0, 0, 1 )

[node name="Game" type="Node2D"]

[node name="Camera" type="Camera2D" parent="."]
position = Vector2( 448, 196 )
current = true
limit_smoothed = true
smoothing_enabled = true
smoothing_speed = 20.0
script = ExtResource( 2 )
limit_horizontal_margin = 30
limit_vertical_margin = 5

[node name="MapCreator" parent="." instance=ExtResource( 3 )]
map_file_location = "res://Client/Maps/Twister.png"
tilemap_node_grass_celestium_layer = NodePath("../Demo/Ground/Grass")
tilemap_node_scraps_layer = NodePath("../Demo/Ground/Scraps")
tilemap_node_marsh_layer = NodePath("../Demo/Ground/Marsh")
tilemap_node_mountains_layer = NodePath("../Demo/Ground/Stone")

[node name="Demo" parent="." instance=ExtResource( 1 )]
position = Vector2( 280, 132 )

[node name="placement tile indexed 2x2" parent="Demo" index="1"]
visible = false

[node name="Objects" parent="Demo" index="2"]
visible = false

[node name="YSort" parent="Demo" index="3"]
visible = false

[node name="mortar 1 indexed 1x1" parent="Demo/YSort" index="0"]
material = SubResource( 2 )
[connection signal="map_size_declared" from="MapCreator" to="Camera" method="_on_MapCreator_map_size_declared"]

[editable path="Demo"]
